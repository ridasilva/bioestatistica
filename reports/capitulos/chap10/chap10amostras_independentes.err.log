Traceback (most recent call last):
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
stats.ttest_rel(y, x)[1]/2
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_583989/2031159445.py[0m in [0;36m?[0;34m()[0m
[0;32m----> 1[0;31m [0mstats[0m[0;34m.[0m[0mttest_rel[0m[0;34m([0m[0my[0m[0;34m,[0m [0mx[0m[0;34m)[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m/[0m[0;36m2[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/scipy/stats/_axis_nan_policy.py[0m in [0;36m?[0;34m(***failed resolving arguments***)[0m
[1;32m    569[0m                     [0mres[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mfull[0m[0;34m([0m[0mn_out[0m[0;34m,[0m [0mNaN[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    570[0m                     [0mres[0m [0;34m=[0m [0m_add_reduced_axes[0m[0;34m([0m[0mres[0m[0;34m,[0m [0mreduced_axes[0m[0;34m,[0m [0mkeepdims[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    571[0m                     [0;32mreturn[0m [0mtuple_to_result[0m[0;34m([0m[0;34m*[0m[0mres[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    572[0m [0;34m[0m[0m
[0;32m--> 573[0;31m                 [0mres[0m [0;34m=[0m [0mhypotest_fun_out[0m[0;34m([0m[0;34m*[0m[0msamples[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    574[0m                 [0mres[0m [0;34m=[0m [0mresult_to_tuple[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    575[0m                 [0mres[0m [0;34m=[0m [0m_add_reduced_axes[0m[0;34m([0m[0mres[0m[0;34m,[0m [0mreduced_axes[0m[0;34m,[0m [0mkeepdims[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    576[0m                 [0;32mreturn[0m [0mtuple_to_result[0m[0;34m([0m[0;34m*[0m[0mres[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/home/rsilva/Documents/miniconda3/envs/datascience/lib/python3.12/site-packages/scipy/stats/_stats_py.py[0m in [0;36m?[0;34m(a, b, axis, nan_policy, alternative)[0m
[1;32m   7331[0m [0;34m[0m[0m
[1;32m   7332[0m     [0mna[0m [0;34m=[0m [0m_get_len[0m[0;34m([0m[0ma[0m[0;34m,[0m [0maxis[0m[0;34m,[0m [0;34m"first argument"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   7333[0m     [0mnb[0m [0;34m=[0m [0m_get_len[0m[0;34m([0m[0mb[0m[0;34m,[0m [0maxis[0m[0;34m,[0m [0;34m"second argument"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   7334[0m     [0;32mif[0m [0mna[0m [0;34m!=[0m [0mnb[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 7335[0;31m         [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m'unequal length arrays'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   7336[0m [0;34m[0m[0m
[1;32m   7337[0m     [0;32mif[0m [0mna[0m [0;34m==[0m [0;36m0[0m [0;32mor[0m [0mnb[0m [0;34m==[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   7338[0m         [0;31m# _axis_nan_policy decorator ensures this only happens with 1d input[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: unequal length arrays

